/*
 * Copyright 2007 Mounir IDRASSI  (mounir.idrassi@idrix.fr, for IDRIX)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

#include "config.h"
#include <stdarg.h>
#include "windef.h"
#include "winbase.h"
#include "wine/debug.h"
#include "winscard.h"
#include "winternl.h"
#include "winscard_impl.h"

WINE_DEFAULT_DEBUG_CHANNEL(winscard);

static HANDLE g_startedEvent = NULL;

const SCARD_IO_REQUEST g_rgSCardT0Pci = { SCARD_PROTOCOL_T0, 8 };
const SCARD_IO_REQUEST g_rgSCardT1Pci = { SCARD_PROTOCOL_T1, 8 };
const SCARD_IO_REQUEST g_rgSCardRawPci = { SCARD_PROTOCOL_RAW, 8 };

static LPSTR convert_from_unicode(LPCWSTR wstr)
{
    LPSTR str;
    DWORD len;

    if (!wstr)
        return NULL;

    len = WideCharToMultiByte(CP_ACP, 0, wstr, -1, NULL, 0, NULL, NULL);
    str = HeapAlloc(GetProcessHeap(), 0, len);
    WideCharToMultiByte(CP_ACP, 0, wstr, -1, str, len, NULL, NULL);

    return str;
}

static LPWSTR convert_to_unicode(LPCSTR str)
{
    LPWSTR wstr;
    DWORD len;

    if (!str)
        return NULL;

    len = MultiByteToWideChar(CP_ACP, 0, str, -1, NULL, 0);
    wstr = HeapAlloc(GetProcessHeap(), 0, len * sizeof(WCHAR));
    MultiByteToWideChar(CP_ACP, 0, str, -1, wstr, len);

    return wstr;
}


BOOL WINAPI DllMain (HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
    TRACE("%p,%x,%p\n", hinstDLL, fdwReason, lpvReserved);

    switch (fdwReason)
    {
        case DLL_PROCESS_ATTACH:
            DisableThreadLibraryCalls(hinstDLL);
            /* FIXME: for now, we act as if the pcsc daemon is always started */
            g_startedEvent = CreateEventA(NULL,TRUE,TRUE,NULL);
            break;
        case DLL_PROCESS_DETACH:
            if (lpvReserved) break;
            CloseHandle(g_startedEvent);
            break;
    }

    return TRUE;
}

HANDLE WINAPI SCardAccessStartedEvent(void)
{
    return g_startedEvent;
}

LONG WINAPI SCardAddReaderToGroupA(SCARDCONTEXT context, LPCSTR reader, LPCSTR group)
{
    LONG retval;
    UNICODE_STRING readerW, groupW;

    if(reader) RtlCreateUnicodeStringFromAsciiz(&readerW,reader);
    else readerW.Buffer = NULL;
    if(group) RtlCreateUnicodeStringFromAsciiz(&groupW,group);
    else groupW.Buffer = NULL;

    retval = SCardAddReaderToGroupW(context, readerW.Buffer, groupW.Buffer);
    RtlFreeUnicodeString(&readerW);
    RtlFreeUnicodeString(&groupW);

    return retval;
}

LONG WINAPI SCardAddReaderToGroupW(SCARDCONTEXT context, LPCWSTR reader, LPCWSTR group)
{
    FIXME("%x %s %s\n", (unsigned int) context, debugstr_w(reader), debugstr_w(group));
    return SCARD_S_SUCCESS;
}

LONG WINAPI SCardEstablishContext(DWORD dwScope, LPCVOID pvReserved1,
    LPCVOID pvReserved2, LPSCARDCONTEXT phContext)
{
/*
    FIXME("(%x,%p,%p,%p) stub\n", dwScope, pvReserved1, pvReserved2, phContext);
    SetLastError(ERROR_CALL_NOT_IMPLEMENTED);
    return SCARD_F_INTERNAL_ERROR;
*/
    return wine_SCardEstablishContext(dwScope,  pvReserved1,
     pvReserved2,  phContext);
}

LONG WINAPI SCardIsValidContext(SCARDCONTEXT context)
{
    /*FIXME("(%lx) stub\n", context);
    SetLastError(ERROR_CALL_NOT_IMPLEMENTED);
    return SCARD_F_INTERNAL_ERROR;
*/
	return wine_SCardIsValidContext(context);
}

LONG WINAPI SCardListCardsA(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgguidInterfaces, DWORD cguidInterfaceCount, LPSTR mszCards, LPDWORD pcchCards)
{
    FIXME(": stub\n");
    SetLastError(ERROR_CALL_NOT_IMPLEMENTED);
    return SCARD_F_INTERNAL_ERROR;
}

LONG WINAPI SCardReleaseContext(SCARDCONTEXT context)
{
    //FIXME("(%lx) stub\n", context);
    //SetLastError(ERROR_CALL_NOT_IMPLEMENTED);
    return wine_SCardReleaseContext(context);
}

LONG WINAPI SCardStatusA(SCARDHANDLE context, LPSTR szReaderName, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
{
    return wine_SCardStatus(context,  szReaderName, pcchReaderLen, pdwState, pdwProtocol, pbAtr,pcbAtrLen);
}

LONG WINAPI SCardStatusW(SCARDHANDLE context, LPWSTR szReaderName, LPDWORD pcchReaderLen, LPDWORD pdwState,LPDWORD pdwProtocol,LPBYTE pbAtr,LPDWORD pcbAtrLen)
{
    LPSTR szReaderNameW=convert_from_unicode(szReaderName);
	return SCardStatusA(context, szReaderNameW, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
}

void WINAPI SCardReleaseStartedEvent(void)
{
    FIXME("stub\n");
}


//stub
LONG        WINAPI SCardConnectA(SCARDCONTEXT hContext,LPCSTR szReader,DWORD dwShareMode,DWORD dwPreferredProtocols,LPSCARDHANDLE phCard,LPDWORD pdwActiveProtocol)
{
	return wine_SCardConnect( hContext,szReader,dwShareMode,dwPreferredProtocols,phCard,pdwActiveProtocol);

}
LONG        WINAPI SCardConnectW(SCARDCONTEXT hContext,LPCWSTR szReader,DWORD dwShareMode,DWORD dwPreferredProtocols,LPSCARDHANDLE phCard,LPDWORD pdwActiveProtocol)
{
	
	CHAR *szReaderA= convert_from_unicode(szReader);
	return SCardConnectA(hContext,szReaderA,dwShareMode,dwPreferredProtocols,phCard, pdwActiveProtocol);
}


LONG WINAPI SCardListReadersA(SCARDCONTEXT context, const CHAR *groups, CHAR *readers, DWORD *buflen)
{
    //FIXME("(%lx, %s, %p, %p) stub\n", context, debugstr_a(groups), readers, buflen);
    return wine_SCardListReaders(context, groups, readers, buflen);
}

LONG WINAPI SCardListReadersW(SCARDCONTEXT context, const WCHAR *groups, WCHAR *readers, DWORD *buflen)
{
    CHAR *groupsA= convert_from_unicode(groups);
	CHAR *readersA= convert_from_unicode(readers);
	return SCardListReadersA(context, groupsA, readersA, buflen);

}

LONG        WINAPI SCardControl(SCARDHANDLE hCard, DWORD dwControlCode,
		LPCVOID pbSendBuffer, DWORD cbSendLength,
		LPVOID pbRecvBuffer, DWORD cbRecvLength,
		LPDWORD lpBytesReturned)
{
	return wine_SCardControl(hCard, dwControlCode,
		pbSendBuffer, cbSendLength,
		pbRecvBuffer, cbRecvLength,
		lpBytesReturned);
}

 LONG  WINAPI SCardTransmit(SCARDHANDLE hCard,
		LPCSCARD_IO_REQUEST pioSendPci,
		LPCBYTE pbSendBuffer, DWORD cbSendLength,
		 LPSCARD_IO_REQUEST pioRecvPci,
		 LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength)
{
	return wine_SCardTransmit(hCard,
		pioSendPci,
		pbSendBuffer,
		cbSendLength,
		 pioRecvPci,
		 pbRecvBuffer, pcbRecvLength);
}

LONG WINAPI SCardListReaderGroupsA(SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups){
	return wine_SCardListReaderGroups(hContext,  mszGroups, pcchGroups);
}
LONG        WINAPI SCardListReaderGroupsW(SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups)
{
	LPSTR mszGroupsA= convert_from_unicode(mszGroups);
	return SCardListReaderGroupsA(hContext, mszGroupsA,pcchGroups);
}


LONG        WINAPI SCardReconnect(SCARDHANDLE hCard,
		DWORD dwShareMode,
		DWORD dwPreferredProtocols,
		DWORD dwInitialization, LPDWORD pdwActiveProtocol)
{
	return wine_SCardReconnect(hCard,
		dwShareMode,
		dwPreferredProtocols,
		dwInitialization, pdwActiveProtocol);
}
LONG        WINAPI SCardDisconnect(SCARDHANDLE hCard, DWORD dwDisposition){
	return wine_SCardDisconnect(hCard, dwDisposition);
}
LONG        WINAPI SCardBeginTransaction(SCARDHANDLE hCard){
	return SCardBeginTransaction(hCard);
}
LONG        WINAPI SCardEndTransaction(SCARDHANDLE hCard, DWORD dwDisposition){
	return wine_SCardEndTransaction(hCard,  dwDisposition);
}



LONG        WINAPI SCardGetStatusChangeA(SCARDCONTEXT hContext,DWORD dwTimeout,LPSCARD_READERSTATEA rgReaderStates,DWORD cReaders)
{	
	return wine_SCardGetStatusChange(hContext,dwTimeout,rgReaderStates,cReaders);
}
LONG        WINAPI SCardGetStatusChangeW(SCARDCONTEXT hContext,DWORD dwTimeout,LPSCARD_READERSTATEW rgReaderStates,DWORD cReaders)
{	
	LPSCARD_READERSTATEA rgReaderStatesA;

    DWORD len=WideCharToMultiByte(CP_ACP, 0, rgReaderStates->szReader, -1, NULL, 0, NULL, NULL);
    rgReaderStatesA->szReader = HeapAlloc(GetProcessHeap(), 0, len);
    WideCharToMultiByte(CP_ACP, 0, rgReaderStates->szReader, -1, rgReaderStatesA->szReader, len, NULL, NULL);
	

	rgReaderStatesA->pvUserData=rgReaderStates->pvUserData;
	rgReaderStatesA->dwCurrentState=rgReaderStates->dwCurrentState;
	rgReaderStatesA->dwEventState=rgReaderStates->dwEventState;
	rgReaderStatesA->cbAtr=rgReaderStates->cbAtr;

	len=WideCharToMultiByte(CP_ACP, 0, (LPCWSTR)rgReaderStates->rgbAtr, -1, NULL, 0, NULL, NULL);
	rgReaderStatesA->rgbAtr =(BYTE[36])HeapAlloc(GetProcessHeap(), 0, len);
	WideCharToMultiByte(CP_ACP, 0, (LPCWSTR)rgReaderStates->szReader, -1, (LPCSTR)rgReaderStatesA->szReader, len, NULL, NULL);

	//char *s3 = memcpy(rgReaderStatesA->rgbAtr,rgReaderStates->rgbAtr,36);
	return wine_SCardGetStatusChange(hContext,dwTimeout,rgReaderStatesA,cReaders);
}
