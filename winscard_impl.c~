
#include "winscard_impl.h"



LONG wine_SCardEstablishContext(DWORD dwScope,
		/*@null@*/ LPCVOID pvReserved1, /*@null@*/ LPCVOID pvReserved2,
		/*@out@*/ LPSCARDCONTEXT phContext)
{

    return SCardEstablishContext( dwScope,  pvReserved1,
     pvReserved2,  phContext);
}

LONG wine_SCardIsValidContext(SCARDCONTEXT context){
	return SCardIsValidContext(context);
}

LONG wine_SCardStatus(SCARDHANDLE context, LPSTR szReaderName, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen){
	return wine_SCardStatus(context,  szReaderName, pcchReaderLen, pdwState, pdwProtocol, pbAtr,pcbAtrLen);
}

LONG wine_SCardListReaders(SCARDCONTEXT hContext,
		LPCSTR mszGroups,
		LPSTR mszReaders,
		LPDWORD pcchReaders)
{
return SCardListReaders(hContext,
		mszGroups,
		mszReaders,
		pcchReaders);
}
LONG wine_SCardReleaseContext(SCARDCONTEXT context)
{
    return SCardReleaseContext(context);
}
LONG   wine_SCardConnect(SCARDCONTEXT hContext,LPCSTR szReader,DWORD dwShareMode,DWORD dwPreferredProtocols,LPSCARDHANDLE phCard,LPDWORD pdwActiveProtocol)
{
	return SCardConnect( hContext,szReader,dwShareMode,dwPreferredProtocols,phCard,pdwActiveProtocol);

}
LONG       wine_SCardControl(SCARDHANDLE hCard, DWORD dwControlCode,
		LPCVOID pbSendBuffer, DWORD cbSendLength,
		LPVOID pbRecvBuffer, DWORD cbRecvLength,
		LPDWORD lpBytesReturned)
{
	return SCardControl(hCard, dwControlCode,
		pbSendBuffer, cbSendLength,
		pbRecvBuffer, cbRecvLength,
		lpBytesReturned);
}



 LONG wine_SCardTransmit(SCARDHANDLE hCard,
		const SCARD_IO_REQUEST *pioSendPci,
		LPCBYTE pbSendBuffer, DWORD cbSendLength,
		 SCARD_IO_REQUEST *pioRecvPci,
		 LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength)
{
	return SCardTransmit(hCard,
		pioSendPci,
	pbSendBuffer,
		cbSendLength,
		 pioRecvPci,
		 pbRecvBuffer, pcbRecvLength);
}

LONG wine_SCardListReaderGroups(SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups){
	return SCardListReaderGroups(hContext,  mszGroups, pcchGroups);
}


LONG wine_SCardReconnect(SCARDHANDLE hCard,
		DWORD dwShareMode,
		DWORD dwPreferredProtocols,
		DWORD dwInitialization,LPDWORD pdwActiveProtocol)
{
	return SCardReconnect(hCard,
		dwShareMode,
		dwPreferredProtocols,
		dwInitialization, pdwActiveProtocol);
}

LONG wine_SCardDisconnect(SCARDHANDLE hCard, DWORD DdwDisposition){
	return SCardDisconnect(hCard, DdwDisposition);
}

LONG wine_SCardBeginTransaction(SCARDHANDLE hCard){
	return SCardBeginTransaction(hCard);
}

LONG wine_SCardEndTransaction(SCARDHANDLE hCard, DWORD dwDisposition){
	return SCardEndTransaction(hCard,  dwDisposition);
}


LONG wine_SCardFreeMemory(SCARDCONTEXT hContext, LPCVOID pvMem){
	return SCardFreeMemory( hContext,  pvMem);
}

LONG wine_SCardCancel(SCARDCONTEXT hContext){
	return	SCardCancel(hContext);
}

LONG wine_SCardGetAttrib(SCARDHANDLE hCard, DWORD dwAttrId,
	LPBYTE pbAttr, LPDWORD pcbAttrLen){
	return SCardGetAttrib( hCard, dwAttrId,
	 pbAttr, pcbAttrLen);
}

LONG wine_SCardSetAttrib(SCARDHANDLE hCard, DWORD dwAttrId,
		LPCBYTE pbAttr, DWORD cbAttrLen){
	return SCardSetAttrib(hCard, dwAttrId,
		 pbAttr, cbAttrLen);
}


LONG wine_SCardGetStatusChange(SCARDCONTEXT hContext,
		DWORD dwTimeout,
		SCARD_READERSTATE *rgReaderStates, DWORD cReaders){
	return SCardGetStatusChange( hContext,
		dwTimeout,
		rgReaderStates,  cReaders);
}
